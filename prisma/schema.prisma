generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id
  firstName    String?   @map("first_name")
  lastName     String?   @map("last_name")
  username     String    @unique
  email        String?   @unique
  imageUrl     String?   @map("image_url")
  banned       Boolean   @default(false)
  createdAt    DateTime  @default(now()) @map("created_at")
  lastSignInAt DateTime? @map("last_sign_in_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  loginHistory       LoginHistory[]
  wallets            Wallets[]
  ccpaymentDeposits  CcpaymentDeposits[]
  depositHistory     DepositHistory[]
  ccpaymentWithdraws CcpaymentWithdraws[]
  withdrawHistory    WithdrawHistory[]

  @@map("users")
}

model LoginHistory {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  clientIp  String   @map("client_ip")
  userAgent String   @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("login_history")
}

enum Status {
  active
  deactive
  maintenance
}

enum CoinStatus {
  active
  deactive
  maintenance
}

enum CcpaymentStatus {
  Success
  Processing
}

enum CreditedStatus {
  true
  false
}

enum DepositStatus {
  Success
  Failed
  Processing
}

model Coins {
  id              String     @id @default(cuid())
  name            String
  symbol          String     @unique
  chainId         Int?       @map("chain_id")
  price           Decimal    @db.Decimal(20, 8)
  api             String?
  allowedNetworks Json?      @map("allowed_networks")
  minimumDeposit  Decimal    @map("minimum_deposit") @db.Decimal(20, 8)
  minimumWithdraw Decimal    @map("minimum_withdraw") @db.Decimal(20, 8)
  withdrawFee     Decimal    @map("withdraw_fee") @db.Decimal(20, 8)
  coinStatus      CoinStatus @default(active) @map("coin_status")
  depositStatus   CoinStatus @default(active) @map("deposit_status")
  withdrawStatus  CoinStatus @default(active) @map("withdraw_status")

  ccPaymentCoinId Int?    @map("ccpayment_coin_id")
  coinFullName    String? @map("coin_full_name")
  logoUrl         String? @map("logo_url")

  networks          Networks[]
  wallets           Wallets[]
  ccpaymentDeposits CcpaymentDeposits[]

  @@map("coins")
}

model Networks {
  id                    String  @id @default(cuid())
  coinId                String  @map("coin_id")
  chain                 String
  chainFullName         String  @map("chain_full_name")
  contract              String?
  precision             Int
  canDeposit            Boolean @default(true) @map("can_deposit")
  canWithdraw           Boolean @default(true) @map("can_withdraw")
  minimumDepositAmount  Decimal @map("minimum_deposit_amount") @db.Decimal(20, 8)
  minimumWithdrawAmount Decimal @map("minimum_withdraw_amount") @db.Decimal(20, 8)
  maximumWithdrawAmount Decimal @map("maximum_withdraw_amount") @db.Decimal(20, 8)
  isSupportMemo         Boolean @default(false) @map("is_support_memo")

  coin            Coins             @relation(fields: [coinId], references: [id], onDelete: Cascade)
  walletAddresses WalletAddresses[]

  @@unique([coinId, chain])
  @@map("networks")
}

model Wallets {
  id      String  @id @default(cuid())
  ownerId String  @map("owner_id")
  coinId  String  @map("coin_id")
  balance Decimal @default(0) @db.Decimal(20, 8)

  owner              User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  coin               Coins                @relation(fields: [coinId], references: [id], onDelete: Restrict)
  addresses          WalletAddresses[]
  ccpaymentWithdraws CcpaymentWithdraws[]

  @@unique([ownerId, coinId])
  @@index([coinId])
  @@map("wallets")
}

model WalletAddresses {
  id        String  @id @default(cuid())
  walletId  String  @map("wallet_id")
  networkId String  @map("network_id")
  address   String
  memo      String?

  wallet  Wallets  @relation(fields: [walletId], references: [id], onDelete: Cascade)
  network Networks @relation(fields: [networkId], references: [id], onDelete: Cascade)

  @@unique([walletId, networkId])
  @@map("wallet_addresses")
}

model CcpaymentDeposits {
  id               String          @id @default(cuid())
  recordId         String          @unique @map("record_id")
  referenceId      String          @map("reference_id")
  coinId           Int             @map("coin_id")
  coinSymbol       String          @map("coin_symbol")
  status           CcpaymentStatus
  isFlaggedAsRisky Boolean         @default(false) @map("is_flagged_as_risky")
  credited         CreditedStatus  @default(false)
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  user User  @relation(fields: [referenceId], references: [id])
  coin Coins @relation(fields: [coinSymbol], references: [symbol])

  @@index([referenceId])
  @@index([coinSymbol])
  @@map("ccpayment_deposits")
}

model DepositHistory {
  id      String        @id @default(cuid())
  userId  String        @map("user_id")
  gateway String
  amount  Decimal       @db.Decimal(20, 8)
  symbol  String
  txid    String?
  status  DepositStatus
  date    DateTime      @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([symbol])
  @@map("deposit_history")
}

model CcpaymentWithdraws {
  id        String          @id @default(cuid())
  recordId  String          @unique @map("record_id")
  userId    String          @map("user_id")
  walletId  String          @map("wallet_id")
  symbol    String
  amount    Decimal         @db.Decimal(20, 8)
  address   String
  status    CcpaymentStatus
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime        @updatedAt @map("updated_at")

  user   User    @relation(fields: [userId], references: [id])
  wallet Wallets @relation(fields: [walletId], references: [id])

  @@index([userId])
  @@index([walletId])
  @@index([status])
  @@map("ccpayment_withdraws")
}

enum WithdrawStatus {
  Processing
  Success
  Failed
}

model WithdrawHistory {
  id           String         @id
  userId       String         @map("user_id")
  withdrawType String         @map("withdraw_type")
  symbol       String
  network      String
  receiver     String
  txid         String?
  status       WithdrawStatus
  amount       Decimal        @db.Decimal(20, 8)
  feeSymbol    String         @map("fee_symbol")
  feeAmount    Decimal        @map("fee_amount") @db.Decimal(20, 8)
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@map("withdraw_history")
}
